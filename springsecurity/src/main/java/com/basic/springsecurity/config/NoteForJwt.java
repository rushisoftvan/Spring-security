package com.basic.springsecurity.config;

public class NoteForJwt

{


    /*
       stateful Authentication

      when client login request to the server . server will cross check the data to the database if data is right then
      server will create the one memory on server for this client it called session all data will store in this session
      in key value pair and one more thing is here like one session id will be create here and server send this id to client
      as cookies cookies store in client side.
      next time when client send the request cookies will go in request-body.
      when client perform logout operation session will be destroyed
      This process call stateful Authentication
      session is create by HttpServletRequest


      stateless Authentication
       when client login request to the server . server will cross check the data to the database if data is right then
       server will create token and send to the client in response Header client will store to the cocckies or database.
       token is unreadable format.
       next time client send the requestwithsend token  to server
       server read this token from request and validate token if token is not available then it says login again .
       if token is valid then it will  send response


       token is generated by one secret key.secret key is maintain on server it will never share to the client
       for validate the token  and create the token secret key is required

       when client send the request to server for read the token and validate the token secrat key is required.
       client can send the request until how long token will expire

       for every token have some time (for token have validity)

       state means data
       IN stateless server notbstore the data of client

    Both are use the realtime as per the requiremnt

     */


                /*
===========================================JWT==================================================================
                                   Session -1
                                   JWT(JSon Web Token)
                             ------------------------------------------------

Client - Server Authentication : -
a. Stateful Authentication
mostly this use for web appliaction
      It will create one http session at server side when client is successfully authenticated
      one session id is provided and same is sent to client using response as one cookie.
      client machine , for next request onwards, submit cookies to server then server verify  and
      provide service. unti logout
      on click logout session will be destroy

b. Stateless Authentication

Note :  JWT concept come in the stateless Authentication

   It will never create memory on server for client
   For client Authentication one unique number is generated is called Token
   Token created by the using  secret key
   Genereted token can be read by the secret key

   This genereted token send to client machine using response
   client has to send token using request in header or body for 2nd reqquest
   Token is valid onely for a period of time

   state means - Data of client storeed in server


 ------------------------------------------------------------------------------------------------------------------
 which scenario use what time
 stateful concept use for the web application
 stateless concept use for the webservice.

-------------------------------------Stateless Authentication used at------------------------------------------------
 a.webservices Authentication(server to server Authentication)
 b.horizontal Scaling(MicroService)
 means running one application on multiple server
 If one application on server like one tomcat on 200 thread is there only 200 request can send on server at time
but if 600 request come one server at time what we have to do to run this application to more then one server as per requirment server like

to run same application on more the one server it 's call horizontal scaling

 c.Resource Grant (Authorization /OAuth)
   register/Login/Login with Google,login with facebook

Benefit
*) stateless Concept never allocate memory on server then performance is increase
*) It is good for Distributed Application

Limitations
*) Token must be validated on every request
*) If token share with other then they can access client data/service  Token should never be share

===================================================================================================================
                                       JWT(Json web token)
                                       II
JWT is opensource service(ApI) that generating Token based on client details and secret key
    JWT - Use for Token based `authentication`
    - stateless authentication (No Http seesion)

    JSON FORMAT :
    {
      key : value
    }

    JWT Format :
    Header : JWT Specific information(Type of algorithm using , Type of  token using)
    payload : Claims(ClientId , ClientName, provider name , date ,expDate)
    signature : unreadable format of header and  payload they are assigned with secret key (Base 64 Encod )
               :Base64Encode(Header) Base64Encode(PAYLOAD)
Ex Token format
   xxxxxxxxx.yyyyyyyyy.zzzzzzzz
   header.payload.signature


   Payload Contains : client Details, provider information expDate
   HMAC - HASBASEDMESSAGE AUTHENTICATION CODE


==================================================================================================================
  a. Generate Token using jwt java api
  b. Read and validate token using jwt api
      Claims - Read/Parse JWT Details By providing to input
              1) Secret key
              2) Token

 JJWT - JAVA JWT Api is open sourse java api we need to add this dependency
 <!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt -->
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt</artifactId>
    <version>0.9.1</version>
</dependency>

public class Test
{

public static void main(String [] args){

     String secretKey="NIT" we should never share the secret key


  //token generation
    String token =Jwts.builder().
    setId("A2566")  //id
    .setSuobject("Ajay")  //subject
    .setIssure("Rushikesh")  // proider
    . setIssueDate(new Date(System.out.currentTimeMilles))  // token generation date
    .setExpiration(new Date(System.out.curruntTimeMilles()+TimeUnit.Minute.toMilliS(10)))// valid unit
    .signWith(SignatureAlgoridham.HS256,Base64.getEncoder().encode(key.getBytes())) //secretKey.getBytes() Sign Alogritdham
    .compact();

       System.out.println(token);



  -------------------------------------------Reading Token/Parsing token-------------------

              It return format of claims c =
                    claims c =  Jwts.parser()//meansReading
                     .setSigningKey(Base64.getEncoder().encode(key.getBytes()))        //secret key
                     .parsClaimsJws(token)
                     .getBody();

                     System.out.println(c.getId());
                     System.out.println(c.getStudent());
                      System.out.println(c.getExpiration());
                      System.out.println(c.getIssure());



                      public String getSubject(){

                      }

                      public boolean isValidateToken()
                      {
                        //expDate>current date
                        return getClaims(key,token).getExpiration().after(new Date(System. curruntMilies()))
                      }

}

}

--------------------------------------------------------------------------------------------------------------------------
                                   Spring boot using jwt
 Preq :
 REST
 DATAJPA
 JWT
 SECURITY
Stage #1 USER/Client Register Process
Stage #2 JwtUtil class code
Stage #3 JWTToken generation without Security(Testing )
stage #4 JWT Token after user Authentication
stage #5 JWT Token Verification from 2nd request onwards

*********************************************************************************************************
                                        Stage #1 USER/Client Register Process
*********************************************************************************************************

Model class : user(id,name,username, password,roles)
*) client has to send  above details in json format that will be converted to user object and
    then save in database.

------codefile------
1.application.properties
2.create entity class UserEntity
3.UserRepository
4.IUserservice layer
5.UserSerbiceImp
6.userController

*********************************************************************************************************
                                        Stage #2JwtUtil class code
*********************************************************************************************************

JAVA JWT API : JJWT dependency
      a) generate Token using subject
      b) Validate Token with username,tokensubject and expdate
**********************************************************************************************************
                                        Stage #3 JWTToken generation without Security(Testing )
*********************************************************************************************************

     HttpRequest
     post/user/login
     content_type:application/json
     body
     {
        username :"",
        password :"",
     }

                 */
}
